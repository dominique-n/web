/byt
(bytes 123)
(bytes "yobro)
(bytes "yobro")
(byte "yobro")
(byte "y")
(byte '\y')
(byte \y)
(apply clojure.string/join " " ["lol" "trol"])
(clojure.string/join " " ["lol" "trol"])
(type 1)
(str (type 1))
(fn [_] nil)
(defn f [_] nil)
(f 1)
(defn f [_])
(f 1)
(re-seq #"<html.+<body.+" "<html><body><p>yo"
)
(re-seq #"<html.+<body.+" "<html><body><p>yo")
(re-seq #"<html.+<body.+<" "<html><body><p>yo")
(re-seq #"<html.+<body.+<p" "<html><body><p>yo")
(re-seq #"<html.+<body.+<p" "<html><body>
<p>")
(assoc [] [1 2])
(conj [] [1 2])
(concat [] [1 2])
(merge [3] [1 2])
(concat [3] [1 2])
(doc concat)
(conj [] 1)
(conj [] 1 2)
(apply conj [] [3 4])
(apply conj [1 2] [3 4])
(conj [1 2] :a 3)
(conj [1 2])
(conj [1 2] [3 4)
(conj [1 2] [3 4])
(apply conj [1 2] [3 4])
(apply conj [1 2] nil)
(apply conj [1 2] [])
(into {} [:a 1 :b 3])
(hash-map [:a 1 :b 3])
(apply hash-map [:a 1 :b 3])
(apply assoc {} [:a 1 :b 2])
(apply assoc {:c 3} [:a 1 :b 2])
(apply assoc {:c 3} [:a 1 :b 2] [:d 4])
(apply assoc {:c 3} [:a 1 :b 2])
(apply hash-map [1 2])
(apply hash-map nil)
(apply hash-map [])
(merge {} {})
(merge {} (apply hash-map []:a )
(merge {} (apply hash-map [:a 1] )
(merge {} (apply hash-map [:a 1]))
(merge {} (apply hash-map nil))
(not= 1 2 3)
(apply not= [1 2 3])
(apply not= [1 2 1])
(apply not= [1 1 1])
(not= 1 1 1 )
(set [1 2 2])
(abs -1)
(Math/abs -1)
(max 0 1)
(Thread/sleep -1)
(Thread/sleep 0)
(merge {:a 1} {:a 2})
(merge {:a 2} {:a 1})
(System/getenv)
(Math/log 10)
(doc Math/pow)
(doc Math/power)
(Math/pow 2 3)
(Math/pow 2 3/4)
(Math/pow 2 2/4)
(doc frequencies)
(frequencies [1 1 2 1])
(type 12
)
(type {})
(type {:a 1})
(map? {}
)
(map? {})
(doc clojure.lang.MapEquivalence)
(class {})
(class {:a 2})
(set [1 2])
(clojure.set/intersection #{1 2} #{3})
(name :a)
(every? identity 1 2)
(every? identity [1 2])
(every? identity [1 nil])
(every? identity [1 -1])
(doc clojure.set/difference)
(doc clojure.set/subset?)
(doc seq?)
(seq? "h")
(seq? [])
(seq? [1 2])
(seqential? [1 2])
(sequential? [1 2])
(sequential? "yo")
(sequential? {"hello})
(sequential? {"hello"})
(sequential? {})
(sequential? {:1 1})
(map? {})
